name: RDP Phantom Access

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download and Install Tailscale
      run: |
        # Download Tailscale Windows installer
        Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.84.2.exe" -OutFile "tailscale-setup.exe"
        
        # Install Tailscale silently
        Start-Process -FilePath "tailscale-setup.exe" -ArgumentList "/S" -Wait
        
        # Wait for installation to complete
        Start-Sleep -Seconds 10
        
        # Verify Tailscale installation path
        Get-ChildItem -Path "C:\Program Files\Tailscale\tailscale.exe" -ErrorAction SilentlyContinue | Out-Null
        if (-not $?) {
            Write-Error "Tailscale executable not found at C:\Program Files\Tailscale\tailscale.exe"
            exit 1
        }

        # Attempt to connect to Tailscale and get login URL
        $tailscaleLoginOutput = & "C:\Program Files\Tailscale\tailscale.exe" up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --accept-routes --login-server=https://control.tailscale.com --json
        Write-Host "Tailscale Login Output: $tailscaleLoginOutput"
        
        # Extract and display the login URL if available
        $loginURL = ($tailscaleLoginOutput | ConvertFrom-Json).AuthURL
        if ($loginURL) {
            Write-Host "Please visit this URL to authorize the device: $loginURL"
        } else {
            Write-Host "No login URL found. Tailscale might have connected automatically or encountered an error."
        }

        # Get Tailscale status and bugreport for diagnostics
        & "C:\Program Files\Tailscale\tailscale.exe" status --json
        & "C:\Program Files\Tailscale\tailscale.exe" bugreport
        
        # Get Tailscale IP (will be empty if not connected)
        $tailscaleIP = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
        Write-Host "Tailscale IP: $tailscaleIP"
      shell: pwsh

    - name: Enable RDP and Set Password
      run: |
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        net user runneradmin ${{ secrets.RDP_PASSWORD }}
        net localgroup administrators runneradmin /add

    - name: Keep Alive
      run: |
        Start-Sleep -Seconds 21600 # Keep alive for 6 hours (6 * 3600 seconds)
      shell: pwsh

